// Code generated by MockGen. DO NOT EDIT.
// Source: proto/video_streaming_grpc.pb.go
//
// Generated by this command:
//
//	mockgen --source=proto/video_streaming_grpc.pb.go -destination=mocks/mock_video_streaming_grpc.pb.go --package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/benjamin-rood/video-transcoding-demo/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockStreamingVideoIngestorClient is a mock of StreamingVideoIngestorClient interface.
type MockStreamingVideoIngestorClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingVideoIngestorClientMockRecorder
}

// MockStreamingVideoIngestorClientMockRecorder is the mock recorder for MockStreamingVideoIngestorClient.
type MockStreamingVideoIngestorClientMockRecorder struct {
	mock *MockStreamingVideoIngestorClient
}

// NewMockStreamingVideoIngestorClient creates a new mock instance.
func NewMockStreamingVideoIngestorClient(ctrl *gomock.Controller) *MockStreamingVideoIngestorClient {
	mock := &MockStreamingVideoIngestorClient{ctrl: ctrl}
	mock.recorder = &MockStreamingVideoIngestorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingVideoIngestorClient) EXPECT() *MockStreamingVideoIngestorClientMockRecorder {
	return m.recorder
}

// UploadVideo mocks base method.
func (m *MockStreamingVideoIngestorClient) UploadVideo(ctx context.Context, opts ...grpc.CallOption) (proto.StreamingVideoIngestor_UploadVideoClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadVideo", varargs...)
	ret0, _ := ret[0].(proto.StreamingVideoIngestor_UploadVideoClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadVideo indicates an expected call of UploadVideo.
func (mr *MockStreamingVideoIngestorClientMockRecorder) UploadVideo(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadVideo", reflect.TypeOf((*MockStreamingVideoIngestorClient)(nil).UploadVideo), varargs...)
}

// MockStreamingVideoIngestor_UploadVideoClient is a mock of StreamingVideoIngestor_UploadVideoClient interface.
type MockStreamingVideoIngestor_UploadVideoClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingVideoIngestor_UploadVideoClientMockRecorder
}

// MockStreamingVideoIngestor_UploadVideoClientMockRecorder is the mock recorder for MockStreamingVideoIngestor_UploadVideoClient.
type MockStreamingVideoIngestor_UploadVideoClientMockRecorder struct {
	mock *MockStreamingVideoIngestor_UploadVideoClient
}

// NewMockStreamingVideoIngestor_UploadVideoClient creates a new mock instance.
func NewMockStreamingVideoIngestor_UploadVideoClient(ctrl *gomock.Controller) *MockStreamingVideoIngestor_UploadVideoClient {
	mock := &MockStreamingVideoIngestor_UploadVideoClient{ctrl: ctrl}
	mock.recorder = &MockStreamingVideoIngestor_UploadVideoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingVideoIngestor_UploadVideoClient) EXPECT() *MockStreamingVideoIngestor_UploadVideoClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoClient) CloseAndRecv() (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockStreamingVideoIngestor_UploadVideoClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockStreamingVideoIngestor_UploadVideoClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreamingVideoIngestor_UploadVideoClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoClient)(nil).Context))
}

// Header mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockStreamingVideoIngestor_UploadVideoClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockStreamingVideoIngestor_UploadVideoClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamingVideoIngestor_UploadVideoClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoClient) Send(arg0 *proto.VideoChunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamingVideoIngestor_UploadVideoClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreamingVideoIngestor_UploadVideoClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamingVideoIngestor_UploadVideoClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockStreamingVideoIngestor_UploadVideoClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoClient)(nil).Trailer))
}

// MockStreamingVideoIngestorServer is a mock of StreamingVideoIngestorServer interface.
type MockStreamingVideoIngestorServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingVideoIngestorServerMockRecorder
}

// MockStreamingVideoIngestorServerMockRecorder is the mock recorder for MockStreamingVideoIngestorServer.
type MockStreamingVideoIngestorServerMockRecorder struct {
	mock *MockStreamingVideoIngestorServer
}

// NewMockStreamingVideoIngestorServer creates a new mock instance.
func NewMockStreamingVideoIngestorServer(ctrl *gomock.Controller) *MockStreamingVideoIngestorServer {
	mock := &MockStreamingVideoIngestorServer{ctrl: ctrl}
	mock.recorder = &MockStreamingVideoIngestorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingVideoIngestorServer) EXPECT() *MockStreamingVideoIngestorServerMockRecorder {
	return m.recorder
}

// UploadVideo mocks base method.
func (m *MockStreamingVideoIngestorServer) UploadVideo(arg0 proto.StreamingVideoIngestor_UploadVideoServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadVideo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadVideo indicates an expected call of UploadVideo.
func (mr *MockStreamingVideoIngestorServerMockRecorder) UploadVideo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadVideo", reflect.TypeOf((*MockStreamingVideoIngestorServer)(nil).UploadVideo), arg0)
}

// mustEmbedUnimplementedStreamingVideoIngestorServer mocks base method.
func (m *MockStreamingVideoIngestorServer) mustEmbedUnimplementedStreamingVideoIngestorServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamingVideoIngestorServer")
}

// mustEmbedUnimplementedStreamingVideoIngestorServer indicates an expected call of mustEmbedUnimplementedStreamingVideoIngestorServer.
func (mr *MockStreamingVideoIngestorServerMockRecorder) mustEmbedUnimplementedStreamingVideoIngestorServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamingVideoIngestorServer", reflect.TypeOf((*MockStreamingVideoIngestorServer)(nil).mustEmbedUnimplementedStreamingVideoIngestorServer))
}

// MockUnsafeStreamingVideoIngestorServer is a mock of UnsafeStreamingVideoIngestorServer interface.
type MockUnsafeStreamingVideoIngestorServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStreamingVideoIngestorServerMockRecorder
}

// MockUnsafeStreamingVideoIngestorServerMockRecorder is the mock recorder for MockUnsafeStreamingVideoIngestorServer.
type MockUnsafeStreamingVideoIngestorServerMockRecorder struct {
	mock *MockUnsafeStreamingVideoIngestorServer
}

// NewMockUnsafeStreamingVideoIngestorServer creates a new mock instance.
func NewMockUnsafeStreamingVideoIngestorServer(ctrl *gomock.Controller) *MockUnsafeStreamingVideoIngestorServer {
	mock := &MockUnsafeStreamingVideoIngestorServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStreamingVideoIngestorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStreamingVideoIngestorServer) EXPECT() *MockUnsafeStreamingVideoIngestorServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStreamingVideoIngestorServer mocks base method.
func (m *MockUnsafeStreamingVideoIngestorServer) mustEmbedUnimplementedStreamingVideoIngestorServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamingVideoIngestorServer")
}

// mustEmbedUnimplementedStreamingVideoIngestorServer indicates an expected call of mustEmbedUnimplementedStreamingVideoIngestorServer.
func (mr *MockUnsafeStreamingVideoIngestorServerMockRecorder) mustEmbedUnimplementedStreamingVideoIngestorServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamingVideoIngestorServer", reflect.TypeOf((*MockUnsafeStreamingVideoIngestorServer)(nil).mustEmbedUnimplementedStreamingVideoIngestorServer))
}

// MockStreamingVideoIngestor_UploadVideoServer is a mock of StreamingVideoIngestor_UploadVideoServer interface.
type MockStreamingVideoIngestor_UploadVideoServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingVideoIngestor_UploadVideoServerMockRecorder
}

// MockStreamingVideoIngestor_UploadVideoServerMockRecorder is the mock recorder for MockStreamingVideoIngestor_UploadVideoServer.
type MockStreamingVideoIngestor_UploadVideoServerMockRecorder struct {
	mock *MockStreamingVideoIngestor_UploadVideoServer
}

// NewMockStreamingVideoIngestor_UploadVideoServer creates a new mock instance.
func NewMockStreamingVideoIngestor_UploadVideoServer(ctrl *gomock.Controller) *MockStreamingVideoIngestor_UploadVideoServer {
	mock := &MockStreamingVideoIngestor_UploadVideoServer{ctrl: ctrl}
	mock.recorder = &MockStreamingVideoIngestor_UploadVideoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingVideoIngestor_UploadVideoServer) EXPECT() *MockStreamingVideoIngestor_UploadVideoServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreamingVideoIngestor_UploadVideoServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoServer) Recv() (*proto.VideoChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.VideoChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreamingVideoIngestor_UploadVideoServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStreamingVideoIngestor_UploadVideoServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamingVideoIngestor_UploadVideoServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoServer) SendAndClose(arg0 *empty.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockStreamingVideoIngestor_UploadVideoServerMockRecorder) SendAndClose(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockStreamingVideoIngestor_UploadVideoServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreamingVideoIngestor_UploadVideoServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamingVideoIngestor_UploadVideoServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockStreamingVideoIngestor_UploadVideoServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockStreamingVideoIngestor_UploadVideoServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockStreamingVideoIngestor_UploadVideoServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockStreamingVideoIngestor_UploadVideoServer)(nil).SetTrailer), arg0)
}
