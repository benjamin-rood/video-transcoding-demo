// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: video_streaming.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamingVideoIngestor_UploadVideo_FullMethodName = "/video_streaming.StreamingVideoIngestor/UploadVideo"
)

// StreamingVideoIngestorClient is the client API for StreamingVideoIngestor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingVideoIngestorClient interface {
	// Sends a video file stream to be processed.
	UploadVideo(ctx context.Context, opts ...grpc.CallOption) (StreamingVideoIngestor_UploadVideoClient, error)
}

type streamingVideoIngestorClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingVideoIngestorClient(cc grpc.ClientConnInterface) StreamingVideoIngestorClient {
	return &streamingVideoIngestorClient{cc}
}

func (c *streamingVideoIngestorClient) UploadVideo(ctx context.Context, opts ...grpc.CallOption) (StreamingVideoIngestor_UploadVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingVideoIngestor_ServiceDesc.Streams[0], StreamingVideoIngestor_UploadVideo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingVideoIngestorUploadVideoClient{stream}
	return x, nil
}

type StreamingVideoIngestor_UploadVideoClient interface {
	Send(*VideoChunk) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type streamingVideoIngestorUploadVideoClient struct {
	grpc.ClientStream
}

func (x *streamingVideoIngestorUploadVideoClient) Send(m *VideoChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingVideoIngestorUploadVideoClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingVideoIngestorServer is the server API for StreamingVideoIngestor service.
// All implementations must embed UnimplementedStreamingVideoIngestorServer
// for forward compatibility
type StreamingVideoIngestorServer interface {
	// Sends a video file stream to be processed.
	UploadVideo(StreamingVideoIngestor_UploadVideoServer) error
	mustEmbedUnimplementedStreamingVideoIngestorServer()
}

// UnimplementedStreamingVideoIngestorServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingVideoIngestorServer struct {
}

func (UnimplementedStreamingVideoIngestorServer) UploadVideo(StreamingVideoIngestor_UploadVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}
func (UnimplementedStreamingVideoIngestorServer) mustEmbedUnimplementedStreamingVideoIngestorServer() {
}

// UnsafeStreamingVideoIngestorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingVideoIngestorServer will
// result in compilation errors.
type UnsafeStreamingVideoIngestorServer interface {
	mustEmbedUnimplementedStreamingVideoIngestorServer()
}

func RegisterStreamingVideoIngestorServer(s grpc.ServiceRegistrar, srv StreamingVideoIngestorServer) {
	s.RegisterService(&StreamingVideoIngestor_ServiceDesc, srv)
}

func _StreamingVideoIngestor_UploadVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingVideoIngestorServer).UploadVideo(&streamingVideoIngestorUploadVideoServer{stream})
}

type StreamingVideoIngestor_UploadVideoServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*VideoChunk, error)
	grpc.ServerStream
}

type streamingVideoIngestorUploadVideoServer struct {
	grpc.ServerStream
}

func (x *streamingVideoIngestorUploadVideoServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingVideoIngestorUploadVideoServer) Recv() (*VideoChunk, error) {
	m := new(VideoChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingVideoIngestor_ServiceDesc is the grpc.ServiceDesc for StreamingVideoIngestor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingVideoIngestor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video_streaming.StreamingVideoIngestor",
	HandlerType: (*StreamingVideoIngestorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadVideo",
			Handler:       _StreamingVideoIngestor_UploadVideo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "video_streaming.proto",
}
